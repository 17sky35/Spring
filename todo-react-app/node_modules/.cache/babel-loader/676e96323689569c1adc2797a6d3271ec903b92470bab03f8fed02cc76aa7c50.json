{"ast":null,"code":"var _jsxFileName = \"D:\\\\1.JYH\\\\3.WEP\\\\work\\\\react-workspace\\\\todo-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport Todo from './Todo'; // Todo 컴포넌트 import\nimport Count from './Count';\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Container, List, Paper } from \"@mui/material\";\nimport AddTodo from './AddTodo';\nimport axios from 'axios';\n\n// 컴포넌트\n// 페이지에 렌더링할 React 엘리먼트를 반환하는 작고 재사용 가능한 코드조각\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [items, setItems] = useState([]);\n\n  //백엔드에게 요청\n  axios.get(\"http:localhost:9090/todo\", {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    setItems(response.data);\n  }).catch(error => {\n    console.error(\"There was an error!\", error);\n  });\n\n  // 추가\n  // 전체 데이터를 App.js에서 관리하기 때문에 함수를 App.js에 작성함\n  const addItem = item => {\n    item.id = 'ID-' + items.length;\n    item.done = false; // done 초기화\n    // ... : 스프레드연산자\n    // 배열이나 객체의 요소를 개별적으로 펼쳐서 다른 배열이나 객체에 삽입할 때 사용한다.\n    // 리액트에서 상태를 업데이트할 때 사용한다.\n    setItems([...items, item]);\n    console.log(\"items : \", items);\n  };\n\n  //내용 수정\n  const editItem = () => {\n    setItems([...items]);\n  };\n\n  // 삭제\n  const deleteItem = item => {\n    // 삭제할 아이템을 찾는다.\n    const newItems = items.filter(e => e.id !== item.id);\n    // 삭제할 아이템을 제외한 아이템을 다시 배열에 저장한다.\n    setItems([...newItems]);\n  };\n  // App.js에서 Todo에 deleteItem 연결하기\n\n  // map() -> 반복문 안에 들어있는 내용을 하나씩 꺼내서 처리한다.\n  // key : 요소의 리스트를 만들 때, React에서 컴포넌트를 렌더링 했을 때 \n  // 어떤 아이템이 변경되었는지 빠르게 감지하기 위해 사용한다.\n  // 만약 key가 설정되지 않았다면 가상DOM을 순차적으로 비교하면서 감지하기 때문에\n  // key가 없을때보다 속도가 느리다.\n  let todoItems = items.length > 0 && /*#__PURE__*/_jsxDEV(Paper, {\n    style: {\n      margin: 16\n    },\n    children: /*#__PURE__*/_jsxDEV(List, {\n      children: items.map(item => /*#__PURE__*/_jsxDEV(Todo, {\n        item: item,\n        deleteItem: deleteItem,\n        editItem: editItem\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n  // JSX문법 : 자바스크립트 코드 안에 HTML코드가 들어가는것\n  // Babel : JSX로 작성된 자바스크립트를 순수 자바스크립트로 만들어주는 라이브러리\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      children: [/*#__PURE__*/_jsxDEV(AddTodo, {\n        addItem: addItem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TodoList\",\n        children: todoItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n// 해당 파일에서는 하나의 컴포넌트만은 내보낸다.\n// export default 구문을 사용해 내보낸 컴포넌트는 중괄호({})를 사용하지 않고\n// 불러올 수 있으며, 이를 또한 원하는 이름으로 바꿔서 불러올 수 있다.\n_s(App, \"6WAym07vHedVzpAy8bFDJKqtv8I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","Todo","Count","React","useState","Container","List","Paper","AddTodo","axios","jsxDEV","_jsxDEV","App","_s","items","setItems","get","headers","then","response","data","catch","error","console","addItem","item","id","length","done","log","editItem","deleteItem","newItems","filter","e","todoItems","style","margin","children","map","fileName","_jsxFileName","lineNumber","columnNumber","className","maxWidth","_c","$RefreshReg$"],"sources":["D:/1.JYH/3.WEP/work/react-workspace/todo-react-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport Todo from './Todo'; // Todo 컴포넌트 import\nimport Count from './Count';\nimport React,{ useState } from 'react';\nimport './App.css';\nimport {Container,List,Paper} from \"@mui/material\";\nimport AddTodo from './AddTodo';\nimport axios from 'axios';\n\n// 컴포넌트\n// 페이지에 렌더링할 React 엘리먼트를 반환하는 작고 재사용 가능한 코드조각\nfunction App() {\n  const[items, setItems]= useState([])\n\n  //백엔드에게 요청\n  axios.get(\"http:localhost:9090/todo\",{\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    }\n  })\n  .then(response => {setItems(response.data)})\n  .catch(error => {console.error(\"There was an error!\",error);\n})\n\n\n\n\n\n\n\n\n\n  // 추가\n  // 전체 데이터를 App.js에서 관리하기 때문에 함수를 App.js에 작성함\n  const addItem = (item) => {\n    item.id = 'ID-' + items.length;\n    item.done = false; // done 초기화\n    // ... : 스프레드연산자\n    // 배열이나 객체의 요소를 개별적으로 펼쳐서 다른 배열이나 객체에 삽입할 때 사용한다.\n    // 리액트에서 상태를 업데이트할 때 사용한다.\n    setItems([...items,item]);\n    console.log(\"items : \", items)\n  }\n  \n  //내용 수정\n  const editItem = () => {\n    setItems([...items])\n  }\n    \n\n  // 삭제\n  const deleteItem = (item) => {\n    // 삭제할 아이템을 찾는다.\n    const newItems = items.filter( e => e.id !== item.id )\n    // 삭제할 아이템을 제외한 아이템을 다시 배열에 저장한다.\n    setItems([...newItems]);\n  }\n  // App.js에서 Todo에 deleteItem 연결하기\n\n  // map() -> 반복문 안에 들어있는 내용을 하나씩 꺼내서 처리한다.\n  // key : 요소의 리스트를 만들 때, React에서 컴포넌트를 렌더링 했을 때 \n  // 어떤 아이템이 변경되었는지 빠르게 감지하기 위해 사용한다.\n  // 만약 key가 설정되지 않았다면 가상DOM을 순차적으로 비교하면서 감지하기 때문에\n  // key가 없을때보다 속도가 느리다.\n  let todoItems = items.length > 0 && (\n    <Paper style={{margin:16}}>\n      <List>\n        {items.map((item) =>(\n          <Todo item={item} key={item.id} deleteItem={deleteItem} editItem = {editItem}/>\n        ))}\n      </List>\n    </Paper>    \n  );\n  // JSX문법 : 자바스크립트 코드 안에 HTML코드가 들어가는것\n  // Babel : JSX로 작성된 자바스크립트를 순수 자바스크립트로 만들어주는 라이브러리\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"md\">\n        <AddTodo addItem={addItem}/>\n      {/* props를 컴포넌트에 전달하기\n      이름={useState값} */}\n      <div className=\"TodoList\">{todoItems}</div>\n      </Container>\n    </div>\n\n  );\n}\n\n\n// 해당 파일에서는 하나의 컴포넌트만은 내보낸다.\n// export default 구문을 사용해 내보낸 컴포넌트는 중괄호({})를 사용하지 않고\n// 불러올 수 있으며, 이를 또한 원하는 이름으로 바꿔서 불러올 수 있다.\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}