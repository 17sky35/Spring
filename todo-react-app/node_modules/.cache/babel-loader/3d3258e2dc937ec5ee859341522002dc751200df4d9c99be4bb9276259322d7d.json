{"ast":null,"code":"var _jsxFileName = \"D:\\\\1.JYH\\\\4.Spring\\\\work2\\\\todo-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport Todo from './Todo'; // Todo 컴포넌트 import\nimport Count from './Count';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Container, List, Paper, Grid, Button, AppBar, Toolbar, Typography } from \"@mui/material\";\nimport AddTodo from './AddTodo';\nimport axios from 'axios';\nimport { call, signout } from './service/ApiService';\n\n// 컴포넌트\n// 페이지에 렌더링할 React 엘리먼트를 반환하는 작고 재사용 가능한 코드조각\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //Todo를 가지고 있는 state\n  const [items, setItems] = useState([]);\n  //로딩여부를 가리는 state\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    //백엔드에게 요청\n    // axios.get(\"http://localhost:9090/todo\", {\n    //   headers: {\n    //       \"Content-Type\": \"application/json\"\n    //   }\n    // })\n    // .then(response => {\n    //     setItems(response.data); // response.data를 통해 서버에서 반환된 데이터를 처리\n    // })\n    // .catch(error => {\n    //     console.error(\"There was an error!\", error); // 에러 처리\n    // });\n    call(\"/todo\", \"GET\").then(result => {\n      setItems(result.data);\n      setLoading(false);\n    });\n  }, []);\n\n  // 추가\n  // 전체 데이터를 App.js에서 관리하기 때문에 함수를 App.js에 작성함\n  const addItem = item => {\n    // item.id = 'ID-' + items.length;\n    // item.done = false; // done 초기화\n    // // ... : 스프레드연산자\n    // // 배열이나 객체의 요소를 개별적으로 펼쳐서 다른 배열이나 객체에 삽입할 때 사용한다.\n    // // 리액트에서 상태를 업데이트할 때 사용한다.\n    // setItems([...items,item]);\n    // console.log(\"items : \", items)\n\n    //벡엔드 연결\n    call(\"/todo\", \"POST\", item).then(result => setItems(result.data));\n  };\n\n  //내용 수정\n  const editItem = item => {\n    // setItems([...items])\n\n    //백엔드 연결---------------------------------\n    call(\"/todo\", \"PUT\", item) // 이제는 /todo에 접근하려면 토큰인증이 필요하다.\n    .then(result => setItems(result.data));\n  };\n\n  // 삭제\n  const deleteItem = item => {\n    // // 삭제할 아이템을 찾는다.\n    // const newItems = items.filter( e => e.id !== item.id )\n    // // 삭제할 아이템을 제외한 아이템을 다시 배열에 저장한다.\n    // setItems([...newItems]);\n\n    //백엔드 연결\n    call(\"/todo\", \"DELETE\", item).then(result => setItems(result.data));\n  };\n  // App.js에서 Todo에 deleteItem 연결하기\n\n  // map() -> 반복문 안에 들어있는 내용을 하나씩 꺼내서 처리한다.\n  // key : 요소의 리스트를 만들 때, React에서 컴포넌트를 렌더링 했을 때 \n  // 어떤 아이템이 변경되었는지 빠르게 감지하기 위해 사용한다.\n  // 만약 key가 설정되지 않았다면 가상DOM을 순차적으로 비교하면서 감지하기 때문에\n  // key가 없을때보다 속도가 느리다.\n  let todoItems = items.length > 0 && /*#__PURE__*/_jsxDEV(Paper, {\n    style: {\n      margin: 16\n    },\n    children: /*#__PURE__*/_jsxDEV(List, {\n      children: items.map(item => /*#__PURE__*/_jsxDEV(Todo, {\n        item: item,\n        deleteItem: deleteItem,\n        editItem: editItem\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n  // JSX문법 : 자바스크립트 코드 안에 HTML코드가 들어가는것\n  // Babel : JSX로 작성된 자바스크립트를 순수 자바스크립트로 만들어주는 라이브러리\n\n  //navigatinBar 추가\n  let navigatinBar = /*#__PURE__*/_jsxDEV(AppBar, {\n    position: \"static\",\n    children: /*#__PURE__*/_jsxDEV(Toolbar, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        justifyContent: \"space-between\",\n        container: true,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \" \\uC624\\uB298\\uC758 \\uD560\\uC77C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            color: \"inherit\",\n            variant: \"text\",\n            onClick: signout,\n            children: \"\\uB85C\\uADF8\\uC544\\uC6C3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n\n  // 로딩중이 아닐 때 렌더링할 화면\n  let todoListPage = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [navigatinBar, /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      children: [/*#__PURE__*/_jsxDEV(AddTodo, {\n        addItem: addItem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TodoList\",\n        children: todoItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n\n  //로딩중일 때 렌더링 할 부분\n  let loadingPage = /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"\\uB85C\\uB529\\uC911...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 21\n  }, this);\n  let content = loadingPage;\n\n  //loading : ture -> 로딩중\n  //loading : false -> 로딩중이 아닌상태\n  if (!loading) {\n    //로딩중이 아니면 todoListPage를 렌더링\n    content = todoListPage;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n\n// 해당 파일에서는 하나의 컴포넌트만은 내보낸다.\n// export default 구문을 사용해 내보낸 컴포넌트는 중괄호({})를 사용하지 않고\n// 불러올 수 있으며, 이를 또한 원하는 이름으로 바꿔서 불러올 수 있다.\n_s(App, \"X0A+44AtCQpjgFsTFhgdow3TGVs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","Todo","Count","React","useEffect","useState","Container","List","Paper","Grid","Button","AppBar","Toolbar","Typography","AddTodo","axios","call","signout","jsxDEV","_jsxDEV","App","_s","items","setItems","loading","setLoading","then","result","data","addItem","item","editItem","deleteItem","todoItems","length","style","margin","children","map","id","fileName","_jsxFileName","lineNumber","columnNumber","navigatinBar","position","justifyContent","container","variant","color","onClick","todoListPage","className","maxWidth","loadingPage","content","_c","$RefreshReg$"],"sources":["D:/1.JYH/4.Spring/work2/todo-react-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport Todo from './Todo'; // Todo 컴포넌트 import\nimport Count from './Count';\nimport React,{ useEffect, useState } from 'react';\nimport './App.css';\nimport {Container,List,Paper,Grid,Button,AppBar,Toolbar,Typography} from \"@mui/material\";\nimport AddTodo from './AddTodo';\nimport axios from 'axios';\nimport { call, signout } from './service/ApiService';\n\n// 컴포넌트\n// 페이지에 렌더링할 React 엘리먼트를 반환하는 작고 재사용 가능한 코드조각\nfunction App() {\n  //Todo를 가지고 있는 state\n  const[items, setItems]= useState([])\n  //로딩여부를 가리는 state\n  const[loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    //백엔드에게 요청\n    // axios.get(\"http://localhost:9090/todo\", {\n    //   headers: {\n    //       \"Content-Type\": \"application/json\"\n    //   }\n    // })\n    // .then(response => {\n    //     setItems(response.data); // response.data를 통해 서버에서 반환된 데이터를 처리\n    // })\n    // .catch(error => {\n    //     console.error(\"There was an error!\", error); // 에러 처리\n    // });\n    call(\"/todo\",\"GET\") \n    .then(result => {\n      setItems(result.data);\n      setLoading(false);\n    })    \n  },[])\n  \n\n\n  // 추가\n  // 전체 데이터를 App.js에서 관리하기 때문에 함수를 App.js에 작성함\n  const addItem = (item) => {\n    // item.id = 'ID-' + items.length;\n    // item.done = false; // done 초기화\n    // // ... : 스프레드연산자\n    // // 배열이나 객체의 요소를 개별적으로 펼쳐서 다른 배열이나 객체에 삽입할 때 사용한다.\n    // // 리액트에서 상태를 업데이트할 때 사용한다.\n    // setItems([...items,item]);\n    // console.log(\"items : \", items)\n\n    \n    //벡엔드 연결\n    call(\"/todo\",\"POST\",item)\n    .then(result => setItems(result.data))\n  }\n  \n  //내용 수정\n  const editItem = (item) => {\n    // setItems([...items])\n\n    //백엔드 연결---------------------------------\n    call(\"/todo\",\"PUT\",item) // 이제는 /todo에 접근하려면 토큰인증이 필요하다.\n    .then(result => setItems(result.data))\n  }\n    \n\n  // 삭제\n  const deleteItem = (item) => {\n    // // 삭제할 아이템을 찾는다.\n    // const newItems = items.filter( e => e.id !== item.id )\n    // // 삭제할 아이템을 제외한 아이템을 다시 배열에 저장한다.\n    // setItems([...newItems]);\n\n    //백엔드 연결\n    call(\"/todo\",\"DELETE\",item)\n    .then(result => setItems(result.data))\n  }\n  // App.js에서 Todo에 deleteItem 연결하기\n\n  // map() -> 반복문 안에 들어있는 내용을 하나씩 꺼내서 처리한다.\n  // key : 요소의 리스트를 만들 때, React에서 컴포넌트를 렌더링 했을 때 \n  // 어떤 아이템이 변경되었는지 빠르게 감지하기 위해 사용한다.\n  // 만약 key가 설정되지 않았다면 가상DOM을 순차적으로 비교하면서 감지하기 때문에\n  // key가 없을때보다 속도가 느리다.\n  let todoItems = items.length > 0 && (\n    <Paper style={{margin:16}}>\n      <List>\n        {items.map((item) =>(\n          <Todo item={item} key={item.id} deleteItem={deleteItem} editItem = {editItem}/>\n        ))}\n      </List>\n    </Paper>    \n  );\n  // JSX문법 : 자바스크립트 코드 안에 HTML코드가 들어가는것\n  // Babel : JSX로 작성된 자바스크립트를 순수 자바스크립트로 만들어주는 라이브러리\n\n\n  //navigatinBar 추가\n  let navigatinBar = (\n    <AppBar position='static'>\n      <Toolbar>\n        <Grid justifyContent=\"space-between\" container>\n          <Grid item>\n            <Typography variant='h6' > 오늘의 할일</Typography>\n          </Grid>\n          <Grid item>\n            {/* variant의 속성값 : contained 입체적인 버튼(배경 색상 포함)\n                                  outlined 테두리만 있는 버튼\n                                  text 텍스트만 있는 버튼 */}\n            <Button color='inherit' variant='text' onClick={signout}>\n              로그아웃\n            </Button>\n          </Grid>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  )\n\n  // 로딩중이 아닐 때 렌더링할 화면\n  let todoListPage=(\n    <div className=\"App\">\n        {navigatinBar}\n      <Container maxWidth=\"md\">\n        <AddTodo addItem={addItem}/>\n      {/* props를 컴포넌트에 전달하기\n      이름={useState값} */}\n      <div className=\"TodoList\">\n        {todoItems}\n      </div>\n      </Container>\n    </div>\n  )\n\n  //로딩중일 때 렌더링 할 부분\n  let loadingPage = <h1>로딩중...</h1>\n  let content = loadingPage;\n\n  //loading : ture -> 로딩중\n  //loading : false -> 로딩중이 아닌상태\n  if(!loading){\n    //로딩중이 아니면 todoListPage를 렌더링\n    content = todoListPage;\n  }\n\n  return (\n    <div className='App'>\n      {content}\n    </div>\n  );\n}\n\n\n// 해당 파일에서는 하나의 컴포넌트만은 내보낸다.\n// export default 구문을 사용해 내보낸 컴포넌트는 중괄호({})를 사용하지 않고\n// 불러올 수 있으며, 이를 또한 원하는 이름으로 바꿔서 불러올 수 있다.\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}