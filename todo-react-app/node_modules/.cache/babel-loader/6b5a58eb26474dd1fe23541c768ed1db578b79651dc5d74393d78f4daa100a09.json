{"ast":null,"code":"import axios from'axios';import{API_BASE_URL}from'../api-config';//api : 호출할 api의 경로\n//method : HTTP 메서드(GET, POST, PUT, DELETE)\n//request : 요청이 담을 데이터(주로 POST,PUT 요청에서 사용)\nexport async function call(api,method,request){let headers=new Headers({\"Content-Type\":\"application/json\"});//로컬 스토리지에서 ACCESS TOKEN 가져오기\nconst accessToken=localStorage.getItem(\"ACCESS_TOKEN\");if(accessToken&&accessToken!==null){headers.append(\"Authorization\",\"Bearer \"+accessToken);}//기본 옵션 설정\nlet options={headers:headers,url:API_BASE_URL+api,method:method};//request가 존재하는 경우 : POST,PUT,DELETE와 같은 GET 이외의 요청일 때\n//요청 본문에 데이터를 담아 보낸다.\nif(request){//객체 형태로 전달된 데이터를 JSON문자열로 변환하여 서버에 전송한다.\noptions.data=JSON.stringify(request);}//axios(options) : 앞서 용설정한 option 객체를 사용하여 axios로 HTTP요청을 보낸다.\nreturn await axios(options)//요청이 성공적으로 처리된 경우 실행되는 코드\n.then(response=>{//서버에서 반환된 실제 데이터를 반환하여, 이 데이터를 호출한 쪽에서 사용할 수 있도록 한다.\n// console.log(response.data);\nreturn response.data;// if(response.status === 200){\n//     return response.data;\n// } else if(response.status === 403){\n//     window.location.href=\"/login\";\n// }else {\n//     Promise.reject(response);\n//     throw Error(response);\n// }\n})//요청 중에 오류가 발생한 경우 실행되는 코드\n.catch(error=>{//에러가 발생하면, 이를 console.log로 출력하여 디버깅하거나 문제를 파악할 수 있도록 한다.\nconsole.log(\"http error\");//상태코드가 403일때 login으로 리다이렉트\nif(error.status===403){window.location.href=\"/login\";}});}export function signin(userDTO){return call(\"/auth/signin\",\"POST\",userDTO).then(response=>{//토큰이 있을 때 App 컴포넌트를 렌더링\nif(response.token){//로컬 스토리지에 토큰 저장\nlocalStorage.setItem(\"ACCESS_TOKEN\",response.token);window.location.href=\"/\";}else{window.location.href=\"/login\";}// console.log(\"response : \" ,response);\n// alert(\"로그인 토큰 : \" + response.token);\n});}//signin\n//로그아웃\nexport function signout(){//로컬스토리지의 값을 null로 만든다\nlocalStorage.setItem(\"ACCESS_TOKEN\",null);window.location.href=\"/login\";}//회원생성\nexport function signup(userDTO){return call(\"/auth/signup\",\"POST\",userDTO);}","map":{"version":3,"names":["axios","API_BASE_URL","call","api","method","request","headers","Headers","accessToken","localStorage","getItem","append","options","url","data","JSON","stringify","then","response","catch","error","console","log","status","window","location","href","signin","userDTO","token","setItem","signout","signup"],"sources":["D:/1.JYH/4.Spring/work/todo-react-app/src/service/ApiService.js"],"sourcesContent":["import axios from 'axios'\r\nimport { API_BASE_URL } from '../api-config'\r\n\r\n//api : 호출할 api의 경로\r\n//method : HTTP 메서드(GET, POST, PUT, DELETE)\r\n//request : 요청이 담을 데이터(주로 POST,PUT 요청에서 사용)\r\nexport async function call(api,method,request){\r\n\r\n    let headers = new Headers({\r\n        \"Content-Type\" : \"application/json\"\r\n    })\r\n    //로컬 스토리지에서 ACCESS TOKEN 가져오기\r\n    const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\r\n    if(accessToken && accessToken !== null){\r\n        headers.append(\"Authorization\",\"Bearer \" + accessToken);\r\n    }\r\n\r\n    //기본 옵션 설정\r\n    let options = {\r\n        headers:headers,\r\n        url : API_BASE_URL + api,\r\n        method : method   \r\n    }\r\n\r\n\r\n    //request가 존재하는 경우 : POST,PUT,DELETE와 같은 GET 이외의 요청일 때\r\n    //요청 본문에 데이터를 담아 보낸다.\r\n    if(request){\r\n        //객체 형태로 전달된 데이터를 JSON문자열로 변환하여 서버에 전송한다.\r\n        options.data = JSON.stringify(request)\r\n    }\r\n    //axios(options) : 앞서 용설정한 option 객체를 사용하여 axios로 HTTP요청을 보낸다.\r\n    return await axios(options)\r\n    //요청이 성공적으로 처리된 경우 실행되는 코드\r\n    .then(response => {\r\n        //서버에서 반환된 실제 데이터를 반환하여, 이 데이터를 호출한 쪽에서 사용할 수 있도록 한다.\r\n        // console.log(response.data);\r\n        return response.data;\r\n\r\n        // if(response.status === 200){\r\n        //     return response.data;\r\n        // } else if(response.status === 403){\r\n        //     window.location.href=\"/login\";\r\n        // }else {\r\n        //     Promise.reject(response);\r\n        //     throw Error(response);\r\n        // }\r\n    })\r\n    //요청 중에 오류가 발생한 경우 실행되는 코드\r\n    .catch(error => {\r\n        //에러가 발생하면, 이를 console.log로 출력하여 디버깅하거나 문제를 파악할 수 있도록 한다.\r\n        console.log(\"http error\")\r\n        //상태코드가 403일때 login으로 리다이렉트\r\n        if(error.status === 403){\r\n            window.location.href=\"/login\";\r\n        }\r\n    })\r\n}\r\n\r\nexport function signin(userDTO){\r\n    return call(\"/auth/signin\",\"POST\",userDTO)\r\n        .then((response) => {\r\n            //토큰이 있을 때 App 컴포넌트를 렌더링\r\n            if(response.token){\r\n                //로컬 스토리지에 토큰 저장\r\n                localStorage.setItem(\"ACCESS_TOKEN\",response.token)\r\n                window.location.href=\"/\";\r\n            }else{\r\n                window.location.href=\"/login\";\r\n            }\r\n            // console.log(\"response : \" ,response);\r\n            // alert(\"로그인 토큰 : \" + response.token);\r\n        })\r\n}//signin\r\n\r\n//로그아웃\r\nexport function signout (){\r\n    //로컬스토리지의 값을 null로 만든다\r\n    localStorage.setItem(\"ACCESS_TOKEN\",null);\r\n    window.location.href=\"/login\"\r\n}\r\n\r\n\r\n//회원생성\r\nexport function signup(userDTO){\r\n    return call(\"/auth/signup\",\"POST\",userDTO);\r\n}\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,YAAY,KAAQ,eAAe,CAE5C;AACA;AACA;AACA,MAAO,eAAe,CAAAC,IAAIA,CAACC,GAAG,CAACC,MAAM,CAACC,OAAO,CAAC,CAE1C,GAAI,CAAAC,OAAO,CAAG,GAAI,CAAAC,OAAO,CAAC,CACtB,cAAc,CAAG,kBACrB,CAAC,CAAC,CACF;AACA,KAAM,CAAAC,WAAW,CAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CACxD,GAAGF,WAAW,EAAIA,WAAW,GAAK,IAAI,CAAC,CACnCF,OAAO,CAACK,MAAM,CAAC,eAAe,CAAC,SAAS,CAAGH,WAAW,CAAC,CAC3D,CAEA;AACA,GAAI,CAAAI,OAAO,CAAG,CACVN,OAAO,CAACA,OAAO,CACfO,GAAG,CAAGZ,YAAY,CAAGE,GAAG,CACxBC,MAAM,CAAGA,MACb,CAAC,CAGD;AACA;AACA,GAAGC,OAAO,CAAC,CACP;AACAO,OAAO,CAACE,IAAI,CAAGC,IAAI,CAACC,SAAS,CAACX,OAAO,CAAC,CAC1C,CACA;AACA,MAAO,MAAM,CAAAL,KAAK,CAACY,OAAO,CAC1B;AAAA,CACCK,IAAI,CAACC,QAAQ,EAAI,CACd;AACA;AACA,MAAO,CAAAA,QAAQ,CAACJ,IAAI,CAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ,CAAC,CACD;AAAA,CACCK,KAAK,CAACC,KAAK,EAAI,CACZ;AACAC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC,CACzB;AACA,GAAGF,KAAK,CAACG,MAAM,GAAK,GAAG,CAAC,CACpBC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC,QAAQ,CACjC,CACJ,CAAC,CAAC,CACN,CAEA,MAAO,SAAS,CAAAC,MAAMA,CAACC,OAAO,CAAC,CAC3B,MAAO,CAAA1B,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC0B,OAAO,CAAC,CACrCX,IAAI,CAAEC,QAAQ,EAAK,CAChB;AACA,GAAGA,QAAQ,CAACW,KAAK,CAAC,CACd;AACApB,YAAY,CAACqB,OAAO,CAAC,cAAc,CAACZ,QAAQ,CAACW,KAAK,CAAC,CACnDL,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC,GAAG,CAC5B,CAAC,IAAI,CACDF,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC,QAAQ,CACjC,CACA;AACA;AACJ,CAAC,CAAC,CACV,CAAC;AAED;AACA,MAAO,SAAS,CAAAK,OAAOA,CAAA,CAAG,CACtB;AACAtB,YAAY,CAACqB,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CACzCN,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC,QAAQ,CACjC,CAGA;AACA,MAAO,SAAS,CAAAM,MAAMA,CAACJ,OAAO,CAAC,CAC3B,MAAO,CAAA1B,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC0B,OAAO,CAAC,CAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}