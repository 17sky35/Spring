{"ast":null,"code":"import React,{useState}from\"react\";import{ListItem,ListItemText,InputBase,Checkbox,ListItemSecondaryAction,IconButton}from\"@mui/material\";import DeleteOutlined from\"@mui/icons-material/DeleteOutlined\";// useState\n// 리액트에서 사용되는 Hook중 하나로 함수형 컴포넌트에서 상태 변수를 사용할 수 있도록 해준다.\n// Hook을 사용하면 제공하는 기능과 상태변수를 사용할 수 있다.\n// 함수 생성 방법\n// 1.function 함수명(){\n// }\n// 2.let 함수명 = function(){   ->  let 함수명 = () => {}\n// }\n// 화살표 함수 규칙\n// 1. 매개변수가 1개면 소괄호 생략 가능\n// 2. 명령이 한 줄이면서 return이 있다면, 중괄호와 return 같이 생략 가능\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Todo=props=>{const[item,setItem]=useState(props.item);const deleteItem=props.deleteItem;const[readOnly,setReadOnly]=useState(true);const editItem=props.editItem;const editEventHandler=e=>{// item.title = e.target.value; // 변경만 해서는 렌더링이 안된다.\n// editItem(); // 없으면 아예 수정이 안됨\n//백엔드 연결----------------------------\nsetItem({...item,title:e.target.value});};// deletEventHandler 작성\nconst deletEventHandler=()=>{// 삭제하려고 하는 todo 전달\ndeleteItem(item);};// 체크박스변경\nconst checkboxEventHandler=e=>{item.done=e.target.checked;editItem(item);};// turnOffReadOnly 함수\n// 내용쪽을 클릭했을 때 수정 가능한 상태로 만들기\nconst turnOffReadOnly=()=>{setReadOnly(false);};// turnOnReadOnly 함수\nconst turnOnReadOnly=e=>{if(e.key==='Enter'){setReadOnly(true);//백엔드 연결---------------------------\neditItem(item);}};return/*#__PURE__*/_jsxs(ListItem,{children:[/*#__PURE__*/_jsx(Checkbox,{checked:item.done,onChange:checkboxEventHandler}),/*#__PURE__*/_jsx(ListItemText,{children:/*#__PURE__*/_jsx(InputBase,{inputProps:{\"aria-label\":\"naked\",\"readOnly\":readOnly},onClick:turnOffReadOnly,onKeyDown:turnOnReadOnly,onChange:editEventHandler,type:\"text\",id:item.id,name:item.id,value:item.title,multiline:true,fullWidth:true})}),/*#__PURE__*/_jsx(ListItemSecondaryAction,{children:/*#__PURE__*/_jsx(IconButton,{\"aria-label\":\"Delete Todo\",onClick:deletEventHandler,children:/*#__PURE__*/_jsx(DeleteOutlined,{})})})]});};export default Todo;","map":{"version":3,"names":["React","useState","ListItem","ListItemText","InputBase","Checkbox","ListItemSecondaryAction","IconButton","DeleteOutlined","jsx","_jsx","jsxs","_jsxs","Todo","props","item","setItem","deleteItem","readOnly","setReadOnly","editItem","editEventHandler","e","title","target","value","deletEventHandler","checkboxEventHandler","done","checked","turnOffReadOnly","turnOnReadOnly","key","children","onChange","inputProps","onClick","onKeyDown","type","id","name","multiline","fullWidth"],"sources":["D:/1.JYH/4.Spring/work/todo-react-app/src/Todo.js"],"sourcesContent":["import React,{useState} from \"react\"\r\nimport { ListItem, \r\n        ListItemText, \r\n        InputBase,\r\n        Checkbox,\r\n        ListItemSecondaryAction,\r\n        IconButton\r\n        } from \"@mui/material\";\r\nimport DeleteOutlined from \"@mui/icons-material/DeleteOutlined\"\r\n// useState\r\n// 리액트에서 사용되는 Hook중 하나로 함수형 컴포넌트에서 상태 변수를 사용할 수 있도록 해준다.\r\n// Hook을 사용하면 제공하는 기능과 상태변수를 사용할 수 있다.\r\n\r\n// 함수 생성 방법\r\n// 1.function 함수명(){\r\n\r\n// }\r\n// 2.let 함수명 = function(){   ->  let 함수명 = () => {}\r\n    \r\n// }\r\n// 화살표 함수 규칙\r\n// 1. 매개변수가 1개면 소괄호 생략 가능\r\n// 2. 명령이 한 줄이면서 return이 있다면, 중괄호와 return 같이 생략 가능\r\n\r\nconst Todo = (props) => {\r\n    const [item, setItem] = useState(props.item);    \r\n    const deleteItem = props.deleteItem;    \r\n    const [readOnly, setReadOnly] = useState(true);\r\n    const editItem = props.editItem;\r\n\r\n    const editEventHandler = (e) => {\r\n        // item.title = e.target.value; // 변경만 해서는 렌더링이 안된다.\r\n        // editItem(); // 없으면 아예 수정이 안됨\r\n\r\n        //백엔드 연결----------------------------\r\n        setItem({...item,title:e.target.value})\r\n    }\r\n\r\n    // deletEventHandler 작성\r\n    const deletEventHandler = () => {\r\n        // 삭제하려고 하는 todo 전달\r\n        deleteItem(item);\r\n    }\r\n    // 체크박스변경\r\n    const checkboxEventHandler = (e) => {\r\n        item.done = e.target.checked;\r\n        editItem(item);\r\n    }\r\n\r\n    // turnOffReadOnly 함수\r\n    // 내용쪽을 클릭했을 때 수정 가능한 상태로 만들기\r\n    const turnOffReadOnly = () => {\r\n        setReadOnly(false);\r\n    }\r\n\r\n    // turnOnReadOnly 함수\r\n    const turnOnReadOnly = (e) => {\r\n        if(e.key === 'Enter'){\r\n            setReadOnly(true);\r\n\r\n            //백엔드 연결---------------------------\r\n            editItem(item);\r\n        }\r\n    }\r\n\r\n    return(\r\n    <ListItem>\r\n        <Checkbox checked={item.done} onChange={checkboxEventHandler}/>\r\n        <ListItemText>\r\n            <InputBase \r\n            inputProps={{\"aria-label\" : \"naked\", \"readOnly\":readOnly}}\r\n            onClick={turnOffReadOnly}\r\n            onKeyDown={turnOnReadOnly}\r\n            onChange={editEventHandler}\r\n            type=\"text\"\r\n            id={item.id}\r\n            name={item.id}\r\n            value={item.title}\r\n            multiline={true}\r\n            fullWidth={true}\r\n            />\r\n        </ListItemText>\r\n        <ListItemSecondaryAction>\r\n            {/* 삭제 */}\r\n            <IconButton aria-label=\"Delete Todo\" onClick={deletEventHandler}>\r\n                <DeleteOutlined />\r\n            </IconButton>\r\n        </ListItemSecondaryAction>\r\n    </ListItem>\r\n    );\r\n}\r\nexport default Todo;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAEC,QAAQ,KAAO,OAAO,CACpC,OAASC,QAAQ,CACTC,YAAY,CACZC,SAAS,CACTC,QAAQ,CACRC,uBAAuB,CACvBC,UAAU,KACH,eAAe,CAC9B,MAAO,CAAAC,cAAc,KAAM,oCAAoC,CAC/D;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEA,KAAM,CAAAC,IAAI,CAAIC,KAAK,EAAK,CACpB,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGf,QAAQ,CAACa,KAAK,CAACC,IAAI,CAAC,CAC5C,KAAM,CAAAE,UAAU,CAAGH,KAAK,CAACG,UAAU,CACnC,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGlB,QAAQ,CAAC,IAAI,CAAC,CAC9C,KAAM,CAAAmB,QAAQ,CAAGN,KAAK,CAACM,QAAQ,CAE/B,KAAM,CAAAC,gBAAgB,CAAIC,CAAC,EAAK,CAC5B;AACA;AAEA;AACAN,OAAO,CAAC,CAAC,GAAGD,IAAI,CAACQ,KAAK,CAACD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAC3C,CAAC,CAED;AACA,KAAM,CAAAC,iBAAiB,CAAGA,CAAA,GAAM,CAC5B;AACAT,UAAU,CAACF,IAAI,CAAC,CACpB,CAAC,CACD;AACA,KAAM,CAAAY,oBAAoB,CAAIL,CAAC,EAAK,CAChCP,IAAI,CAACa,IAAI,CAAGN,CAAC,CAACE,MAAM,CAACK,OAAO,CAC5BT,QAAQ,CAACL,IAAI,CAAC,CAClB,CAAC,CAED;AACA;AACA,KAAM,CAAAe,eAAe,CAAGA,CAAA,GAAM,CAC1BX,WAAW,CAAC,KAAK,CAAC,CACtB,CAAC,CAED;AACA,KAAM,CAAAY,cAAc,CAAIT,CAAC,EAAK,CAC1B,GAAGA,CAAC,CAACU,GAAG,GAAK,OAAO,CAAC,CACjBb,WAAW,CAAC,IAAI,CAAC,CAEjB;AACAC,QAAQ,CAACL,IAAI,CAAC,CAClB,CACJ,CAAC,CAED,mBACAH,KAAA,CAACV,QAAQ,EAAA+B,QAAA,eACLvB,IAAA,CAACL,QAAQ,EAACwB,OAAO,CAAEd,IAAI,CAACa,IAAK,CAACM,QAAQ,CAAEP,oBAAqB,CAAC,CAAC,cAC/DjB,IAAA,CAACP,YAAY,EAAA8B,QAAA,cACTvB,IAAA,CAACN,SAAS,EACV+B,UAAU,CAAE,CAAC,YAAY,CAAG,OAAO,CAAE,UAAU,CAACjB,QAAQ,CAAE,CAC1DkB,OAAO,CAAEN,eAAgB,CACzBO,SAAS,CAAEN,cAAe,CAC1BG,QAAQ,CAAEb,gBAAiB,CAC3BiB,IAAI,CAAC,MAAM,CACXC,EAAE,CAAExB,IAAI,CAACwB,EAAG,CACZC,IAAI,CAAEzB,IAAI,CAACwB,EAAG,CACdd,KAAK,CAAEV,IAAI,CAACQ,KAAM,CAClBkB,SAAS,CAAE,IAAK,CAChBC,SAAS,CAAE,IAAK,CACf,CAAC,CACQ,CAAC,cACfhC,IAAA,CAACJ,uBAAuB,EAAA2B,QAAA,cAEpBvB,IAAA,CAACH,UAAU,EAAC,aAAW,aAAa,CAAC6B,OAAO,CAAEV,iBAAkB,CAAAO,QAAA,cAC5DvB,IAAA,CAACF,cAAc,GAAE,CAAC,CACV,CAAC,CACQ,CAAC,EACpB,CAAC,CAEf,CAAC,CACD,cAAe,CAAAK,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}