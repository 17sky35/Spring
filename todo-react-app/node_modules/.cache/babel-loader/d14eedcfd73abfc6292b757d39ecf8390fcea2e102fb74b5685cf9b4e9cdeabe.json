{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL } from '../api-config';\n\n//api : 호출할 api의 경로\n//method : HTTP 메서드(GET, POST, PUT, DELETE)\n//request : 요청이 담을 데이터(주로 POST,PUT 요청에서 사용)\nexport async function call(api, method, request) {\n  let headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  });\n  //로컬 스토리지에서 ACCESS TOKEN 가져오기\n  const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n  if (accessToken && accessToken !== null) {\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\n  }\n\n  //기본 옵션 설정\n  let options = {\n    headers: headers,\n    url: API_BASE_URL + api,\n    method: method\n  };\n\n  //request가 존재하는 경우 : POST,PUT,DELETE와 같은 GET 이외의 요청일 때\n  //요청 본문에 데이터를 담아 보낸다.\n  if (request) {\n    //객체 형태로 전달된 데이터를 JSON문자열로 변환하여 서버에 전송한다.\n    options.data = JSON.stringify(request);\n  }\n  //axios(options) : 앞서 용설정한 option 객체를 사용하여 axios로 HTTP요청을 보낸다.\n  return await axios(options)\n  //요청이 성공적으로 처리된 경우 실행되는 코드\n  .then(response => {\n    //서버에서 반환된 실제 데이터를 반환하여, 이 데이터를 호출한 쪽에서 사용할 수 있도록 한다.\n    // console.log(response.data);\n    return response.data;\n\n    // if(response.status === 200){\n    //     return response.data;\n    // } else if(response.status === 403){\n    //     window.location.href=\"/login\";\n    // }else {\n    //     Promise.reject(response);\n    //     throw Error(response);\n    // }\n  })\n  //요청 중에 오류가 발생한 경우 실행되는 코드\n  .catch(error => {\n    //에러가 발생하면, 이를 console.log로 출력하여 디버깅하거나 문제를 파악할 수 있도록 한다.\n    console.log(\"http error\");\n    //상태코드가 403일때 login으로 리다이렉트\n    if (error.status === 403) {\n      window.location.href = \"/login\";\n    }\n  });\n}\nexport function signin(userDTO) {\n  return call(\"/auth/signin\", \"POST\", userDTO).then(response => {\n    //토큰이 있을 때 App 컴포넌트를 렌더링\n    if (response.token) {\n      //로컬 스토리지에 토큰 저장\n      localStorage.setItem(\"ACCESS_TOKEN\", response.token);\n      window.location.href = \"/\";\n    } else {\n      window.location.href = \"/login\";\n    }\n    // console.log(\"response : \" ,response);\n    // alert(\"로그인 토큰 : \" + response.token);\n  });\n} //signin\n\n//로그아웃\nexport function signout() {\n  //로컬스토리지의 값을 null로 만든다\n  localStorage.setItem(\"ACCESS_TOKEN\", null);\n  window.location.href = \"/login\";\n}\n\n//회원생성\nexport function signup(userDTO) {\n  return call(\"/auth/signup\", \"POST\", userDTO);\n}","map":{"version":3,"names":["axios","API_BASE_URL","call","api","method","request","headers","Headers","accessToken","localStorage","getItem","append","options","url","data","JSON","stringify","then","response","catch","error","console","log","status","window","location","href","signin","userDTO","token","setItem","signout","signup"],"sources":["D:/1.JYH/3.WEP/work/react-workspace/todo-react-app/src/service/ApiService.js"],"sourcesContent":["import axios from 'axios'\r\nimport { API_BASE_URL } from '../api-config'\r\n\r\n//api : 호출할 api의 경로\r\n//method : HTTP 메서드(GET, POST, PUT, DELETE)\r\n//request : 요청이 담을 데이터(주로 POST,PUT 요청에서 사용)\r\nexport async function call(api,method,request){\r\n\r\n    let headers = new Headers({\r\n        \"Content-Type\" : \"application/json\"\r\n    })\r\n    //로컬 스토리지에서 ACCESS TOKEN 가져오기\r\n    const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\r\n    if(accessToken && accessToken !== null){\r\n        headers.append(\"Authorization\",\"Bearer \" + accessToken);\r\n    }\r\n\r\n    //기본 옵션 설정\r\n    let options = {\r\n        headers:headers,\r\n        url : API_BASE_URL + api,\r\n        method : method   \r\n    }\r\n\r\n\r\n    //request가 존재하는 경우 : POST,PUT,DELETE와 같은 GET 이외의 요청일 때\r\n    //요청 본문에 데이터를 담아 보낸다.\r\n    if(request){\r\n        //객체 형태로 전달된 데이터를 JSON문자열로 변환하여 서버에 전송한다.\r\n        options.data = JSON.stringify(request)\r\n    }\r\n    //axios(options) : 앞서 용설정한 option 객체를 사용하여 axios로 HTTP요청을 보낸다.\r\n    return await axios(options)\r\n    //요청이 성공적으로 처리된 경우 실행되는 코드\r\n    .then(response => {\r\n        //서버에서 반환된 실제 데이터를 반환하여, 이 데이터를 호출한 쪽에서 사용할 수 있도록 한다.\r\n        // console.log(response.data);\r\n        return response.data;\r\n\r\n        // if(response.status === 200){\r\n        //     return response.data;\r\n        // } else if(response.status === 403){\r\n        //     window.location.href=\"/login\";\r\n        // }else {\r\n        //     Promise.reject(response);\r\n        //     throw Error(response);\r\n        // }\r\n    })\r\n    //요청 중에 오류가 발생한 경우 실행되는 코드\r\n    .catch(error => {\r\n        //에러가 발생하면, 이를 console.log로 출력하여 디버깅하거나 문제를 파악할 수 있도록 한다.\r\n        console.log(\"http error\")\r\n        //상태코드가 403일때 login으로 리다이렉트\r\n        if(error.status === 403){\r\n            window.location.href=\"/login\";\r\n        }\r\n    })\r\n}\r\n\r\nexport function signin(userDTO){\r\n    return call(\"/auth/signin\",\"POST\",userDTO)\r\n        .then((response) => {\r\n            //토큰이 있을 때 App 컴포넌트를 렌더링\r\n            if(response.token){\r\n                //로컬 스토리지에 토큰 저장\r\n                localStorage.setItem(\"ACCESS_TOKEN\",response.token)\r\n                window.location.href=\"/\";\r\n            }else{\r\n                window.location.href=\"/login\";\r\n            }\r\n            // console.log(\"response : \" ,response);\r\n            // alert(\"로그인 토큰 : \" + response.token);\r\n        })\r\n}//signin\r\n\r\n//로그아웃\r\nexport function signout (){\r\n    //로컬스토리지의 값을 null로 만든다\r\n    localStorage.setItem(\"ACCESS_TOKEN\",null);\r\n    window.location.href=\"/login\"\r\n}\r\n\r\n\r\n//회원생성\r\nexport function signup(userDTO){\r\n    return call(\"/auth/signup\",\"POST\",userDTO)\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,eAAe;;AAE5C;AACA;AACA;AACA,OAAO,eAAeC,IAAIA,CAACC,GAAG,EAACC,MAAM,EAACC,OAAO,EAAC;EAE1C,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAAC;IACtB,cAAc,EAAG;EACrB,CAAC,CAAC;EACF;EACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EACxD,IAAGF,WAAW,IAAIA,WAAW,KAAK,IAAI,EAAC;IACnCF,OAAO,CAACK,MAAM,CAAC,eAAe,EAAC,SAAS,GAAGH,WAAW,CAAC;EAC3D;;EAEA;EACA,IAAII,OAAO,GAAG;IACVN,OAAO,EAACA,OAAO;IACfO,GAAG,EAAGZ,YAAY,GAAGE,GAAG;IACxBC,MAAM,EAAGA;EACb,CAAC;;EAGD;EACA;EACA,IAAGC,OAAO,EAAC;IACP;IACAO,OAAO,CAACE,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACX,OAAO,CAAC;EAC1C;EACA;EACA,OAAO,MAAML,KAAK,CAACY,OAAO;EAC1B;EAAA,CACCK,IAAI,CAACC,QAAQ,IAAI;IACd;IACA;IACA,OAAOA,QAAQ,CAACJ,IAAI;;IAEpB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;EACD;EAAA,CACCK,KAAK,CAACC,KAAK,IAAI;IACZ;IACAC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IACzB;IACA,IAAGF,KAAK,CAACG,MAAM,KAAK,GAAG,EAAC;MACpBC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,QAAQ;IACjC;EACJ,CAAC,CAAC;AACN;AAEA,OAAO,SAASC,MAAMA,CAACC,OAAO,EAAC;EAC3B,OAAO1B,IAAI,CAAC,cAAc,EAAC,MAAM,EAAC0B,OAAO,CAAC,CACrCX,IAAI,CAAEC,QAAQ,IAAK;IAChB;IACA,IAAGA,QAAQ,CAACW,KAAK,EAAC;MACd;MACApB,YAAY,CAACqB,OAAO,CAAC,cAAc,EAACZ,QAAQ,CAACW,KAAK,CAAC;MACnDL,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,GAAG;IAC5B,CAAC,MAAI;MACDF,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,QAAQ;IACjC;IACA;IACA;EACJ,CAAC,CAAC;AACV,CAAC;;AAED;AACA,OAAO,SAASK,OAAOA,CAAA,EAAG;EACtB;EACAtB,YAAY,CAACqB,OAAO,CAAC,cAAc,EAAC,IAAI,CAAC;EACzCN,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,QAAQ;AACjC;;AAGA;AACA,OAAO,SAASM,MAAMA,CAACJ,OAAO,EAAC;EAC3B,OAAO1B,IAAI,CAAC,cAAc,EAAC,MAAM,EAAC0B,OAAO,CAAC;AAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}