{"ast":null,"code":"var _jsxFileName = \"D:\\\\1.JYH\\\\3.WEP\\\\work\\\\react-workspace\\\\todo-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport Todo from './Todo'; // Todo 컴포넌트 import\nimport Count from './Count';\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Container, List, Paper } from \"@mui/material\";\nimport AddTodo from './AddTodo';\n\n// 컴포넌트\n// 페이지에 렌더링할 React 엘리먼트를 반환하는 작고 재사용 가능한 코드조각\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [items, setItems] = useState([{\n    id: \"0\",\n    title: \"Hello world 1\"\n  }, {\n    id: \"0\",\n    title: \"Hello world 2\"\n  }]);\n  const addItem = item => {\n    item.id = 'ID-' + item.length;\n    item.done = false; // done 초기화\n    // ... : 스프레드연산자\n    // 배열이나 객체의 요소를 개별적으로 펼쳐서 다른 배열이나 객체에 삽입할 때 사용한다.\n    // 리액트에서 상태를 업데이트할 때 사용한다.\n    setItems([...items, item]);\n    console.log(\"items : \", items);\n  };\n\n  // map() -> 반복문 안에 들어있는 내용을 하나씩 꺼내서 처리한다.\n  // key : 요소의 리스트를 만들 때, React에서 컴포넌트를 렌더링 했을 때 \n  // 어떤 아이템이 변경되었는지 빠르게 감지하기 위해 사용한다.\n  // 만약 key가 설정되지 않았다면 가상DOM을 순차적으로 비교하면서 감지하기 때문에\n  // key가 없을때보다 속도가 느리다.\n  let todoItems = items.length > 0 && /*#__PURE__*/_jsxDEV(Paper, {\n    style: {\n      margin: 16\n    },\n    children: /*#__PURE__*/_jsxDEV(List, {\n      children: items.map(item => /*#__PURE__*/_jsxDEV(Todo, {\n        item: item\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n  // JSX문법 : 자바스크립트 코드 안에 HTML코드가 들어가는것\n  // Babel : JSX로 작성된 자바스크립트를 순수 자바스크립트로 만들어주는 라이브러리\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      children: [/*#__PURE__*/_jsxDEV(AddTodo, {\n        addItem: addItem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TodoList\",\n        children: todoItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n// 해당 파일에서는 하나의 컴포넌트만은 내보낸다.\n// export default 구문을 사용해 내보낸 컴포넌트는 중괄호({})를 사용하지 않고\n// 불러올 수 있으며, 이를 또한 원하는 이름으로 바꿔서 불러올 수 있다.\n_s(App, \"jo4hYCwZaCLKEIIWwGJAYxOn2R4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","Todo","Count","React","useState","Container","List","Paper","AddTodo","jsxDEV","_jsxDEV","App","_s","items","setItems","id","title","addItem","item","length","done","console","log","todoItems","style","margin","children","map","fileName","_jsxFileName","lineNumber","columnNumber","className","maxWidth","_c","$RefreshReg$"],"sources":["D:/1.JYH/3.WEP/work/react-workspace/todo-react-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport Todo from './Todo'; // Todo 컴포넌트 import\nimport Count from './Count';\nimport React,{ useState } from 'react';\nimport './App.css';\nimport {Container,List,Paper} from \"@mui/material\";\nimport AddTodo from './AddTodo';\n\n// 컴포넌트\n// 페이지에 렌더링할 React 엘리먼트를 반환하는 작고 재사용 가능한 코드조각\nfunction App() {\n  const[items, setItems]= useState([{\n    id:\"0\",\n    title : \"Hello world 1\",\n    },\n    {id:\"0\",\n    title : \"Hello world 2\",\n    }])\n\n    const addItem = (item) => {\n      item.id = 'ID-' + item.length;\n      item.done = false; // done 초기화\n      // ... : 스프레드연산자\n      // 배열이나 객체의 요소를 개별적으로 펼쳐서 다른 배열이나 객체에 삽입할 때 사용한다.\n      // 리액트에서 상태를 업데이트할 때 사용한다.\n      setItems([...items,item]);\n      console.log(\"items : \", items)\n    }\n\n\n  // map() -> 반복문 안에 들어있는 내용을 하나씩 꺼내서 처리한다.\n  // key : 요소의 리스트를 만들 때, React에서 컴포넌트를 렌더링 했을 때 \n  // 어떤 아이템이 변경되었는지 빠르게 감지하기 위해 사용한다.\n  // 만약 key가 설정되지 않았다면 가상DOM을 순차적으로 비교하면서 감지하기 때문에\n  // key가 없을때보다 속도가 느리다.\n  let todoItems = items.length > 0 && (\n    <Paper style={{margin:16}}>\n      <List>\n        {items.map((item) =>(\n          <Todo item={item} key={item.id}/>\n        ))}\n      </List>\n    </Paper>    \n  );\n  // JSX문법 : 자바스크립트 코드 안에 HTML코드가 들어가는것\n  // Babel : JSX로 작성된 자바스크립트를 순수 자바스크립트로 만들어주는 라이브러리\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"md\">\n        <AddTodo addItem={addItem}/>\n      {/* props를 컴포넌트에 전달하기\n      이름={useState값} */}\n      <div className=\"TodoList\">{todoItems}</div>\n      </Container>\n    </div>\n\n  );\n}\n\n\n// 해당 파일에서는 하나의 컴포넌트만은 내보낸다.\n// export default 구문을 사용해 내보낸 컴포넌트는 중괄호({})를 사용하지 않고\n// 불러올 수 있으며, 이를 또한 원하는 이름으로 바꿔서 불러올 수 있다.\nexport default App;"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAOC,IAAI,MAAM,QAAQ,CAAC,CAAC;AAC3B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,KAAK,IAAGC,QAAQ,QAAQ,OAAO;AACtC,OAAO,WAAW;AAClB,SAAQC,SAAS,EAACC,IAAI,EAACC,KAAK,QAAO,eAAe;AAClD,OAAOC,OAAO,MAAM,WAAW;;AAE/B;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAEV,QAAQ,CAAC,CAAC;IAChCW,EAAE,EAAC,GAAG;IACNC,KAAK,EAAG;EACR,CAAC,EACD;IAACD,EAAE,EAAC,GAAG;IACPC,KAAK,EAAG;EACR,CAAC,CAAC,CAAC;EAEH,MAAMC,OAAO,GAAIC,IAAI,IAAK;IACxBA,IAAI,CAACH,EAAE,GAAG,KAAK,GAAGG,IAAI,CAACC,MAAM;IAC7BD,IAAI,CAACE,IAAI,GAAG,KAAK,CAAC,CAAC;IACnB;IACA;IACA;IACAN,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAACK,IAAI,CAAC,CAAC;IACzBG,OAAO,CAACC,GAAG,CAAC,UAAU,EAAET,KAAK,CAAC;EAChC,CAAC;;EAGH;EACA;EACA;EACA;EACA;EACA,IAAIU,SAAS,GAAGV,KAAK,CAACM,MAAM,GAAG,CAAC,iBAC9BT,OAAA,CAACH,KAAK;IAACiB,KAAK,EAAE;MAACC,MAAM,EAAC;IAAE,CAAE;IAAAC,QAAA,eACxBhB,OAAA,CAACJ,IAAI;MAAAoB,QAAA,EACFb,KAAK,CAACc,GAAG,CAAET,IAAI,iBACdR,OAAA,CAACT,IAAI;QAACiB,IAAI,EAAEA;MAAK,GAAMA,IAAI,CAACH,EAAE;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CACjC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CACR;EACD;EACA;EACA,oBACErB,OAAA;IAAKsB,SAAS,EAAC,KAAK;IAAAN,QAAA,eAClBhB,OAAA,CAACL,SAAS;MAAC4B,QAAQ,EAAC,IAAI;MAAAP,QAAA,gBACtBhB,OAAA,CAACF,OAAO;QAACS,OAAO,EAAEA;MAAQ;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAG9BrB,OAAA;QAAKsB,SAAS,EAAC,UAAU;QAAAN,QAAA,EAAEH;MAAS;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAGV;;AAGA;AACA;AACA;AAAAnB,EAAA,CApDSD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAqDZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}