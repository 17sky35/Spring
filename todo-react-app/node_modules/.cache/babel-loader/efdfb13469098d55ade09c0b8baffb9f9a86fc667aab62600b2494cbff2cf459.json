{"ast":null,"code":"import logo from'./logo.svg';import Todo from'./Todo';// Todo 컴포넌트 import\nimport Count from'./Count';import React,{useEffect,useState}from'react';import'./App.css';import{Container,List,Paper,Grid,Button,AppBar,Toolbar,Typography}from\"@mui/material\";import AddTodo from'./AddTodo';import axios from'axios';import{call,signout}from'./service/ApiService';// 컴포넌트\n// 페이지에 렌더링할 React 엘리먼트를 반환하는 작고 재사용 가능한 코드조각\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){//Todo를 가지고 있는 state\nconst[items,setItems]=useState([]);//로딩여부를 가리는 state\nconst[loading,setLoading]=useState(true);useEffect(()=>{//백엔드에게 요청\n// axios.get(\"http://localhost:9090/todo\", {\n//   headers: {\n//       \"Content-Type\": \"application/json\"\n//   }\n// })\n// .then(response => {\n//     setItems(response.data); // response.data를 통해 서버에서 반환된 데이터를 처리\n// })\n// .catch(error => {\n//     console.error(\"There was an error!\", error); // 에러 처리\n// });\ncall(\"/todo\",\"GET\").then(result=>{setItems(result.data);setLoading(false);});},[]);// 추가\n// 전체 데이터를 App.js에서 관리하기 때문에 함수를 App.js에 작성함\nconst addItem=item=>{// item.id = 'ID-' + items.length;\n// item.done = false; // done 초기화\n// // ... : 스프레드연산자\n// // 배열이나 객체의 요소를 개별적으로 펼쳐서 다른 배열이나 객체에 삽입할 때 사용한다.\n// // 리액트에서 상태를 업데이트할 때 사용한다.\n// setItems([...items,item]);\n// console.log(\"items : \", items)\n//벡엔드 연결\ncall(\"/todo\",\"POST\",item).then(result=>setItems(result.data));};//내용 수정\nconst editItem=item=>{// setItems([...items])\n//백엔드 연결---------------------------------\ncall(\"/todo\",\"PUT\",item)// 이제는 /todo에 접근하려면 토큰인증이 필요하다.\n.then(result=>setItems(result.data));};// 삭제\nconst deleteItem=item=>{// // 삭제할 아이템을 찾는다.\n// const newItems = items.filter( e => e.id !== item.id )\n// // 삭제할 아이템을 제외한 아이템을 다시 배열에 저장한다.\n// setItems([...newItems]);\n//백엔드 연결\ncall(\"/todo\",\"DELETE\",item).then(result=>setItems(result.data));};// App.js에서 Todo에 deleteItem 연결하기\n// map() -> 반복문 안에 들어있는 내용을 하나씩 꺼내서 처리한다.\n// key : 요소의 리스트를 만들 때, React에서 컴포넌트를 렌더링 했을 때 \n// 어떤 아이템이 변경되었는지 빠르게 감지하기 위해 사용한다.\n// 만약 key가 설정되지 않았다면 가상DOM을 순차적으로 비교하면서 감지하기 때문에\n// key가 없을때보다 속도가 느리다.\nlet todoItems=items.length>0&&/*#__PURE__*/_jsx(Paper,{style:{margin:16},children:/*#__PURE__*/_jsx(List,{children:items.map(item=>/*#__PURE__*/_jsx(Todo,{item:item,deleteItem:deleteItem,editItem:editItem},item.id))})});// JSX문법 : 자바스크립트 코드 안에 HTML코드가 들어가는것\n// Babel : JSX로 작성된 자바스크립트를 순수 자바스크립트로 만들어주는 라이브러리\n//navigatinBar 추가\nlet navigatinBar=/*#__PURE__*/_jsx(AppBar,{position:\"static\",children:/*#__PURE__*/_jsx(Toolbar,{children:/*#__PURE__*/_jsxs(Grid,{justifyContent:\"space-between\",container:true,children:[/*#__PURE__*/_jsx(Grid,{item:true,children:/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\" \\uC624\\uB298\\uC758 \\uD560\\uC77C\"})}),/*#__PURE__*/_jsx(Grid,{item:true,children:/*#__PURE__*/_jsx(Button,{color:\"inherit\",variant:\"text\",onClick:signout,children:\"\\uB85C\\uADF8\\uC544\\uC6C3\"})})]})})});// 로딩중이 아닐 때 렌더링할 화면\nlet todoListPage=/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[navigatinBar,/*#__PURE__*/_jsxs(Container,{maxWidth:\"md\",children:[/*#__PURE__*/_jsx(AddTodo,{addItem:addItem}),/*#__PURE__*/_jsx(\"div\",{className:\"TodoList\",children:todoItems})]})]});//로딩중일 때 렌더링 할 부분\nlet loadingPage=/*#__PURE__*/_jsx(\"h1\",{children:\"\\uB85C\\uB529\\uC911...\"});let content=loadingPage;//loading : ture -> 로딩중\n//loading : false -> 로딩중이 아닌상태\nif(!loading){//로딩중이 아니면 todoListPage를 렌더링\ncontent=todoListPage;}return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:content});}// 해당 파일에서는 하나의 컴포넌트만은 내보낸다.\n// export default 구문을 사용해 내보낸 컴포넌트는 중괄호({})를 사용하지 않고\n// 불러올 수 있으며, 이를 또한 원하는 이름으로 바꿔서 불러올 수 있다.\nexport default App;","map":{"version":3,"names":["logo","Todo","Count","React","useEffect","useState","Container","List","Paper","Grid","Button","AppBar","Toolbar","Typography","AddTodo","axios","call","signout","jsx","_jsx","jsxs","_jsxs","App","items","setItems","loading","setLoading","then","result","data","addItem","item","editItem","deleteItem","todoItems","length","style","margin","children","map","id","navigatinBar","position","justifyContent","container","variant","color","onClick","todoListPage","className","maxWidth","loadingPage","content"],"sources":["D:/1.JYH/4.Spring/work2/todo-react-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport Todo from './Todo'; // Todo 컴포넌트 import\nimport Count from './Count';\nimport React,{ useEffect, useState } from 'react';\nimport './App.css';\nimport {Container,List,Paper,Grid,Button,AppBar,Toolbar,Typography} from \"@mui/material\";\nimport AddTodo from './AddTodo';\nimport axios from 'axios';\nimport { call, signout } from './service/ApiService';\n\n// 컴포넌트\n// 페이지에 렌더링할 React 엘리먼트를 반환하는 작고 재사용 가능한 코드조각\nfunction App() {\n  //Todo를 가지고 있는 state\n  const[items, setItems]= useState([])\n  //로딩여부를 가리는 state\n  const[loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    //백엔드에게 요청\n    // axios.get(\"http://localhost:9090/todo\", {\n    //   headers: {\n    //       \"Content-Type\": \"application/json\"\n    //   }\n    // })\n    // .then(response => {\n    //     setItems(response.data); // response.data를 통해 서버에서 반환된 데이터를 처리\n    // })\n    // .catch(error => {\n    //     console.error(\"There was an error!\", error); // 에러 처리\n    // });\n    call(\"/todo\",\"GET\") \n    .then(result => {\n      setItems(result.data);\n      setLoading(false);\n    })    \n  },[])\n  \n\n\n  // 추가\n  // 전체 데이터를 App.js에서 관리하기 때문에 함수를 App.js에 작성함\n  const addItem = (item) => {\n    // item.id = 'ID-' + items.length;\n    // item.done = false; // done 초기화\n    // // ... : 스프레드연산자\n    // // 배열이나 객체의 요소를 개별적으로 펼쳐서 다른 배열이나 객체에 삽입할 때 사용한다.\n    // // 리액트에서 상태를 업데이트할 때 사용한다.\n    // setItems([...items,item]);\n    // console.log(\"items : \", items)\n\n    \n    //벡엔드 연결\n    call(\"/todo\",\"POST\",item)\n    .then(result => setItems(result.data))\n  }\n  \n  //내용 수정\n  const editItem = (item) => {\n    // setItems([...items])\n\n    //백엔드 연결---------------------------------\n    call(\"/todo\",\"PUT\",item) // 이제는 /todo에 접근하려면 토큰인증이 필요하다.\n    .then(result => setItems(result.data))\n  }\n    \n\n  // 삭제\n  const deleteItem = (item) => {\n    // // 삭제할 아이템을 찾는다.\n    // const newItems = items.filter( e => e.id !== item.id )\n    // // 삭제할 아이템을 제외한 아이템을 다시 배열에 저장한다.\n    // setItems([...newItems]);\n\n    //백엔드 연결\n    call(\"/todo\",\"DELETE\",item)\n    .then(result => setItems(result.data))\n  }\n  // App.js에서 Todo에 deleteItem 연결하기\n\n  // map() -> 반복문 안에 들어있는 내용을 하나씩 꺼내서 처리한다.\n  // key : 요소의 리스트를 만들 때, React에서 컴포넌트를 렌더링 했을 때 \n  // 어떤 아이템이 변경되었는지 빠르게 감지하기 위해 사용한다.\n  // 만약 key가 설정되지 않았다면 가상DOM을 순차적으로 비교하면서 감지하기 때문에\n  // key가 없을때보다 속도가 느리다.\n  let todoItems = items.length > 0 && (\n    <Paper style={{margin:16}}>\n      <List>\n        {items.map((item) =>(\n          <Todo item={item} key={item.id} deleteItem={deleteItem} editItem = {editItem}/>\n        ))}\n      </List>\n    </Paper>    \n  );\n  // JSX문법 : 자바스크립트 코드 안에 HTML코드가 들어가는것\n  // Babel : JSX로 작성된 자바스크립트를 순수 자바스크립트로 만들어주는 라이브러리\n\n\n  //navigatinBar 추가\n  let navigatinBar = (\n    <AppBar position='static'>\n      <Toolbar>\n        <Grid justifyContent=\"space-between\" container>\n          <Grid item>\n            <Typography variant='h6' > 오늘의 할일</Typography>\n          </Grid>\n          <Grid item>\n            {/* variant의 속성값 : contained 입체적인 버튼(배경 색상 포함)\n                                  outlined 테두리만 있는 버튼\n                                  text 텍스트만 있는 버튼 */}\n            <Button color='inherit' variant='text' onClick={signout}>\n              로그아웃\n            </Button>\n          </Grid>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  )\n\n  // 로딩중이 아닐 때 렌더링할 화면\n  let todoListPage=(\n    <div className=\"App\">\n        {navigatinBar}\n      <Container maxWidth=\"md\">\n        <AddTodo addItem={addItem}/>\n      {/* props를 컴포넌트에 전달하기\n      이름={useState값} */}\n      <div className=\"TodoList\">\n        {todoItems}\n      </div>\n      </Container>\n    </div>\n  )\n\n  //로딩중일 때 렌더링 할 부분\n  let loadingPage = <h1>로딩중...</h1>\n  let content = loadingPage;\n\n  //loading : ture -> 로딩중\n  //loading : false -> 로딩중이 아닌상태\n  if(!loading){\n    //로딩중이 아니면 todoListPage를 렌더링\n    content = todoListPage;\n  }\n\n  return (\n    <div className='App'>\n      {content}\n    </div>\n  );\n}\n\n\n// 해당 파일에서는 하나의 컴포넌트만은 내보낸다.\n// export default 구문을 사용해 내보낸 컴포넌트는 중괄호({})를 사용하지 않고\n// 불러올 수 있으며, 이를 또한 원하는 이름으로 바꿔서 불러올 수 있다.\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}