{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL } from '../api-config';\n\n//api : 호출할 api의 경로\n//method : HTTP 메서드(GET, POST, PUT, DELETE)\n//request : 요청이 담을 데이터(주로 POST,PUT 요청에서 사용)\nexport async function call(api, method, request) {\n  //기본 옵션 설정\n  let options = {\n    url: API_BASE_URL + api,\n    method: method,\n    headers: {\n      //요청 헤더 설정\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  //request가 존재하는 경우 : POST,PUT,DELETE와 같은 GET 이외의 요청일 때\n  //요청 본문에 데이터를 담아 보낸다.\n  if (request) {\n    //객체 형태로 전달된 데이터를 JSON문자열로 변환하여 서버에 전송한다.\n    options.data = JSON.stringify(request);\n  }\n  //axios(options) : 앞서 용설정한 option 객체를 사용하여 axios로 HTTP요청을 보낸다.\n  return await axios(options)\n  //요청이 성공적으로 처리된 경우 실행되는 코드\n  .then(response => {\n    //서버에서 반환된 실제 데이터를 반환하여, 이 데이터를 호출한 쪽에서 사용할 수 있도록 한다.\n    // console.log(response.data);\n    return response.data;\n\n    // if(response.status === 200){\n    //     return response.data;\n    // } else if(response.status === 403){\n    //     window.location.href=\"/login\";\n    // }else {\n    //     Promise.reject(response);\n    //     throw Error(response);\n    // }\n  })\n  //요청 중에 오류가 발생한 경우 실행되는 코드\n  .catch(error => {\n    //에러가 발생하면, 이를 console.log로 출력하여 디버깅하거나 문제를 파악할 수 있도록 한다.\n    console.log(\"http error\");\n    //상태코드가 403일때 login으로 리다이렉트\n    if (error.status === 403) {\n      window.location.href = \"/login\";\n    }\n  });\n}\nexport function signin(userDTO) {\n  return call(\"/auth/signin\", \"POST\", userDTO).then(response => {\n    //토큰이 있을 때 App 컴포넌트를 렌더링\n    if (response.token) {\n      //로컬 스토리지에 토큰 저장\n      window.location.href = \"/\";\n    }\n    // console.log(\"response : \" ,response);\n    // alert(\"로그인 토큰 : \" + response.token);\n  });\n}","map":{"version":3,"names":["axios","API_BASE_URL","call","api","method","request","options","url","headers","data","JSON","stringify","then","response","catch","error","console","log","status","window","location","href","signin","userDTO","token"],"sources":["D:/1.JYH/3.WEP/work/react-workspace/todo-react-app/src/service/ApiService.js"],"sourcesContent":["import axios from 'axios'\r\nimport { API_BASE_URL } from '../api-config'\r\n\r\n//api : 호출할 api의 경로\r\n//method : HTTP 메서드(GET, POST, PUT, DELETE)\r\n//request : 요청이 담을 데이터(주로 POST,PUT 요청에서 사용)\r\nexport async function call(api,method,request){\r\n    //기본 옵션 설정\r\n        let options = {\r\n        url : API_BASE_URL + api,\r\n        method : method,\r\n        headers : { //요청 헤더 설정\r\n            \"Content-Type\" : \"application/json\"\r\n        }\r\n    }\r\n\r\n\r\n    //request가 존재하는 경우 : POST,PUT,DELETE와 같은 GET 이외의 요청일 때\r\n    //요청 본문에 데이터를 담아 보낸다.\r\n    if(request){\r\n        //객체 형태로 전달된 데이터를 JSON문자열로 변환하여 서버에 전송한다.\r\n        options.data = JSON.stringify(request)\r\n    }\r\n    //axios(options) : 앞서 용설정한 option 객체를 사용하여 axios로 HTTP요청을 보낸다.\r\n    return await axios(options)\r\n    //요청이 성공적으로 처리된 경우 실행되는 코드\r\n    .then(response => {\r\n        //서버에서 반환된 실제 데이터를 반환하여, 이 데이터를 호출한 쪽에서 사용할 수 있도록 한다.\r\n        // console.log(response.data);\r\n        return response.data;\r\n\r\n        // if(response.status === 200){\r\n        //     return response.data;\r\n        // } else if(response.status === 403){\r\n        //     window.location.href=\"/login\";\r\n        // }else {\r\n        //     Promise.reject(response);\r\n        //     throw Error(response);\r\n        // }\r\n    })\r\n    //요청 중에 오류가 발생한 경우 실행되는 코드\r\n    .catch(error => {\r\n        //에러가 발생하면, 이를 console.log로 출력하여 디버깅하거나 문제를 파악할 수 있도록 한다.\r\n        console.log(\"http error\")\r\n        //상태코드가 403일때 login으로 리다이렉트\r\n        if(error.status === 403){\r\n            window.location.href=\"/login\";\r\n        }\r\n    })\r\n}\r\n\r\nexport function signin(userDTO){\r\n    return call(\"/auth/signin\",\"POST\",userDTO)\r\n        .then((response) => {\r\n            //토큰이 있을 때 App 컴포넌트를 렌더링\r\n            if(response.token){\r\n                //로컬 스토리지에 토큰 저장\r\n                window.location.href=\"/\";\r\n            }\r\n            // console.log(\"response : \" ,response);\r\n            // alert(\"로그인 토큰 : \" + response.token);\r\n        })\r\n}\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,eAAe;;AAE5C;AACA;AACA;AACA,OAAO,eAAeC,IAAIA,CAACC,GAAG,EAACC,MAAM,EAACC,OAAO,EAAC;EAC1C;EACI,IAAIC,OAAO,GAAG;IACdC,GAAG,EAAGN,YAAY,GAAGE,GAAG;IACxBC,MAAM,EAAGA,MAAM;IACfI,OAAO,EAAG;MAAE;MACR,cAAc,EAAG;IACrB;EACJ,CAAC;;EAGD;EACA;EACA,IAAGH,OAAO,EAAC;IACP;IACAC,OAAO,CAACG,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACN,OAAO,CAAC;EAC1C;EACA;EACA,OAAO,MAAML,KAAK,CAACM,OAAO;EAC1B;EAAA,CACCM,IAAI,CAACC,QAAQ,IAAI;IACd;IACA;IACA,OAAOA,QAAQ,CAACJ,IAAI;;IAEpB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;EACD;EAAA,CACCK,KAAK,CAACC,KAAK,IAAI;IACZ;IACAC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IACzB;IACA,IAAGF,KAAK,CAACG,MAAM,KAAK,GAAG,EAAC;MACpBC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,QAAQ;IACjC;EACJ,CAAC,CAAC;AACN;AAEA,OAAO,SAASC,MAAMA,CAACC,OAAO,EAAC;EAC3B,OAAOrB,IAAI,CAAC,cAAc,EAAC,MAAM,EAACqB,OAAO,CAAC,CACrCX,IAAI,CAAEC,QAAQ,IAAK;IAChB;IACA,IAAGA,QAAQ,CAACW,KAAK,EAAC;MACd;MACAL,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,GAAG;IAC5B;IACA;IACA;EACJ,CAAC,CAAC;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}