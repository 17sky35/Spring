{"ast":null,"code":"var _jsxFileName = \"D:\\\\1.JYH\\\\3.WEP\\\\work\\\\react-workspace\\\\todo-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport Todo from './Todo'; // Todo 컴포넌트 import\nimport Count from './Count';\nimport React, { useState } from 'react';\nimport './App.css';\nimport { List, Paper } from \"@mui/material\";\n// 컴포넌트\n// 페이지에 렌더링할 React 엘리먼트를 반환하는 작고 재사용 가능한 코드조각\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [items, setItem] = useState([{\n    id: \"0\",\n    title: \"Hello world 1\",\n    done: true\n  }, {\n    id: \"0\",\n    title: \"Hello world 2\",\n    done: false\n  }]);\n  // map() -> 반복문 안에 들어있는 내용을 하나씩 꺼내서 처리한다.\n  // key : 요소의 리스트를 만들 때, React에서 컴포넌트를 렌더링 했을 때 \n  // 어떤 아이템이 변경되었는지 빠르게 감지하기 위해 사용한다.\n  // 만약 key가 설정되지 않았다면 가상DOM을 순차적으로 비교하면서 감지하기 때문에\n  // key가 없을때보다 속도가 느리다.\n  let todoItems = items.length > 0 && /*#__PURE__*/_jsxDEV(Paper, {\n    style: {\n      margin: 16\n    },\n    children: /*#__PURE__*/_jsxDEV(List, {\n      children: items.map(item => /*#__PURE__*/_jsxDEV(Todo, {\n        item: item\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n  // JSX문법 : 자바스크립트 코드 안에 HTML코드가 들어가는것\n  // Babel : JSX로 작성된 자바스크립트를 순수 자바스크립트로 만들어주는 라이브러리\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: todoItems\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n// 해당 파일에서는 하나의 컴포넌트만은 내보낸다.\n// export default 구문을 사용해 내보낸 컴포넌트는 중괄호({})를 사용하지 않고\n// 불러올 수 있으며, 이를 또한 원하는 이름으로 바꿔서 불러올 수 있다.\n_s(App, \"rb+llx2+a1jWNv0Mp+a98BDLGdo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","Todo","Count","React","useState","List","Paper","jsxDEV","_jsxDEV","App","_s","items","setItem","id","title","done","todoItems","length","style","margin","children","map","item","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["D:/1.JYH/3.WEP/work/react-workspace/todo-react-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport Todo from './Todo'; // Todo 컴포넌트 import\nimport Count from './Count';\nimport React,{ useState } from 'react';\nimport './App.css';\nimport {List,Paper} from \"@mui/material\";\n// 컴포넌트\n// 페이지에 렌더링할 React 엘리먼트를 반환하는 작고 재사용 가능한 코드조각\nfunction App() {\n  const[items, setItem]= useState([{\n    id:\"0\",\n    title : \"Hello world 1\",\n    done : true\n    },\n    {id:\"0\",\n    title : \"Hello world 2\",\n    done : false\n    }])\n  // map() -> 반복문 안에 들어있는 내용을 하나씩 꺼내서 처리한다.\n  // key : 요소의 리스트를 만들 때, React에서 컴포넌트를 렌더링 했을 때 \n  // 어떤 아이템이 변경되었는지 빠르게 감지하기 위해 사용한다.\n  // 만약 key가 설정되지 않았다면 가상DOM을 순차적으로 비교하면서 감지하기 때문에\n  // key가 없을때보다 속도가 느리다.\n  let todoItems = items.length > 0 && (\n    <Paper style={{margin:16}}>\n      <List>\n        {items.map((item) =>(\n          <Todo item={item} key={item.id}/>\n        ))}\n      </List>\n    </Paper>\n  );\n  // JSX문법 : 자바스크립트 코드 안에 HTML코드가 들어가는것\n  // Babel : JSX로 작성된 자바스크립트를 순수 자바스크립트로 만들어주는 라이브러리\n  return (\n    <div className=\"App\">\n      {/* props를 컴포넌트에 전달하기 \n      이름={useState값} */}\n      {/* <Todo item={items[i]} /> */}\n      {todoItems}\n    </div>\n  );\n}\n\n\n// 해당 파일에서는 하나의 컴포넌트만은 내보낸다.\n// export default 구문을 사용해 내보낸 컴포넌트는 중괄호({})를 사용하지 않고\n// 불러올 수 있으며, 이를 또한 원하는 이름으로 바꿔서 불러올 수 있다.\nexport default App;\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAOC,IAAI,MAAM,QAAQ,CAAC,CAAC;AAC3B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,KAAK,IAAGC,QAAQ,QAAQ,OAAO;AACtC,OAAO,WAAW;AAClB,SAAQC,IAAI,EAACC,KAAK,QAAO,eAAe;AACxC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAK,CAACC,KAAK,EAAEC,OAAO,CAAC,GAAER,QAAQ,CAAC,CAAC;IAC/BS,EAAE,EAAC,GAAG;IACNC,KAAK,EAAG,eAAe;IACvBC,IAAI,EAAG;EACP,CAAC,EACD;IAACF,EAAE,EAAC,GAAG;IACPC,KAAK,EAAG,eAAe;IACvBC,IAAI,EAAG;EACP,CAAC,CAAC,CAAC;EACL;EACA;EACA;EACA;EACA;EACA,IAAIC,SAAS,GAAGL,KAAK,CAACM,MAAM,GAAG,CAAC,iBAC9BT,OAAA,CAACF,KAAK;IAACY,KAAK,EAAE;MAACC,MAAM,EAAC;IAAE,CAAE;IAAAC,QAAA,eACxBZ,OAAA,CAACH,IAAI;MAAAe,QAAA,EACFT,KAAK,CAACU,GAAG,CAAEC,IAAI,iBACdd,OAAA,CAACP,IAAI;QAACqB,IAAI,EAAEA;MAAK,GAAMA,IAAI,CAACT,EAAE;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CACjC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CACR;EACD;EACA;EACA,oBACElB,OAAA;IAAKmB,SAAS,EAAC,KAAK;IAAAP,QAAA,EAIjBJ;EAAS;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV;;AAGA;AACA;AACA;AAAAhB,EAAA,CAvCSD,GAAG;AAAAmB,EAAA,GAAHnB,GAAG;AAwCZ,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}