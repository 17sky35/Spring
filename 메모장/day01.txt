https://mvnrepository.com/
https://start.spring.io/

1. SPRING 배경지식

1)HTTP(HyperText Transfer Protocol)
1>웹에서 클라이언트와 서버 간에 데이터를 주고받기 위한 프로토콜임
2>많은 웹 기반 애플리케이션이 HTTP를 이용하고, 우리 프로젝트도 HTTP로 서버와 클라이언트 간에 통신을 할 것임

2)HyperText
1>다른 문서로 향하는 링크가 있는 텍스트
2>문서를 하이퍼텍스트로 만들기 위해서 HTML(HyperTextMarkupLanguage)를 사용함
3>Transfer Protocol : 통신을 하기위한 규약임

3)웹 서비스에서 HTTP를 어떤식으로 사용하는가?
1>사용자는 브라우저(크롬,사파리,엣지 등)을 통해 서버에 HTTP요청(Request)를 전송할 수 있음
2>브라우저의 주소창에 URL을 치고 엔터를 누르면 브라우저는 HTTP GET 요청을 해당 URL서버로 전송함
3>그리고 그 결과인 HTTP응답(Response)을 브라우저에 렌더링함

4)HTTP요청
ex)

GET /api/users?id=123 HTTP/1.1
Host: www.example.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8
Connection: keep-alive

->송신자는 www.example.com으로 GET 요청을 전송하려고 함
->프로토콜의 버전 : 1.1
->운영체제는 위도우10이고 요청 당시 크롬을 사용함



2. 요청메서드

1)HTTP요청(Request)에는 GET,POST,PUT,DELETE와 같은 메서드를 지정할 수 있음

2)이러한 메서드는 호스트에게 지정한 리소스에 어떤 작업을 하소깊은지 알려주는 역할을 함

3)종류

HTTP Method		Description					Use Case Examples

GET		서버에서 리소스를 요청할 때 사용			데이터 조회 (예: 사용자 정보 가져오기)
POST		서버에 데이터를 전송할 때 사용			데이터 생성 (예: 새로운 게시글 작성)
PUT		서버의 기존 리소스를 업데이트할 때 사용		데이터 수정 (예: 사용자 정보 수정)
DELETE		서버의 리소스를 삭제할 때 사용			데이터 삭제 (예: 게시글 삭제)
------------------------------------------------------------------------------------------------------------------------------------------------
PATCH		리소스의 일부를 업데이트할 때 사용			데이터 일부 수정 (예: 특정 필드만 업데이트)
OPTIONS		서버가 지원하는 HTTP 메서드 확인			CORS 설정 확인 및 사전 검사
HEAD		GET과 동일하지만 응답 본문 없이 헤더 정보만 받음	리소스의 존재 여부 확인, 메타데이터 조회
CONNECT	서버에 터널을 설정해 SSL 등과 같은 프로토콜을 사용	프록시 서버를 통한 터널링
TRACE		요청이 서버까지 가는 경로를 추적			네트워크 진단 및 디버깅

4)비록 HTTP 메서드가 이런 기능을 한다고 하지만 실제 기능은 전적으로 API를 개발하는 개발자(백엔드)에게 달려있음

5)예를 들어 POST메서드이지만 개발자는 리소스에게 어떤 작업도 하지 않고 그냥 반환하도록 API를 작성할 수 있음

6)DELETE메서드에 아무것도 삭제하지 않는 API를 구현해 사용할 수도 있음

7)요지는, 표에서 HTTP 메서드 '기능'의 이미란 '이런 기능을 위한 API에 사용하는게 좋다'의 뜻임

8)GET메서드로 지정했으니 마법처럼 리소스가 반환되는 것이 아님

9)각 메서드에 연결되는 API는 개발자가 작성해야 하는 것임



3. 콘텐츠 용어정리1

1)Date : 서버가 응답을 보낸 시간

2)Content-Type
1>응답의 미디어 타입을 의미함
2>다양한 종류의 타입을 가지고 있음

3)콘텐츠 유형의 종류

Content-Type				설명					예시

text/html					HTML 문서				웹 페이지 콘텐츠 (HTML 파일)
text/plain					일반 텍스트 파일				단순 텍스트 파일
application/json				JSON 데이터				API 응답, JSON 형식 데이터
application/xml				XML 데이터				XML 형식의 API 응답 또는 데이터
application/javascript			JavaScript 파일				웹 페이지에서 사용하는 자바스크립트 코드
application/x-www-form-urlencoded		폼 데이터 (키-값 쌍)로 인코딩된 데이터	HTML 폼 제출 시 주로 사용
multipart/form-data			파일 업로드를 포함한 폼 데이터		파일 업로드와 함께 전송되는 데이터
image/png				PNG 이미지				PNG 포맷의 이미지 파일
image/jpeg				JPEG 이미지				JPEG 포맷의 이미지 파일
image/gif				GIF 이미지				GIF 포맷의 이미지 파일
audio/mpeg				MPEG 오디오 파일				MP3 파일
video/mp4				MP4 비디오 파일				MP4 비디오 파일
application/pdf				PDF 문서					PDF 파일
application/zip				ZIP 압축 파일				ZIP 압축된 파일

4)Content-Length : 응답 본문의 길이 (바이트 단위)



4. 콘텐츠 용어정리2

1)Connection : keep-alive (연결 유지), close (연결 종료)

2)keep-alive (연결 유지)
1>클라이언트가 서버와의 연결을 유지하려고 할 때 사용됨
2>기본적으로 HTTP/1.1에서 연결을 끊지 않고 여러 요청과 응답을 같은 연결을 통해 주고받음
3>장점: 여러 요청을 할 때 매번 새로운 연결을 생성하지 않아도 되므로 성능이 향상됨
4>특히, 웹 페이지를 로드할 때 여러 리소스(HTML, CSS, 이미지 등)를 한꺼번에 요청할 때 유용함

3)close (연결 종료)
1>요청과 응답이 끝난 후 연결을 즉시 닫겠다는 의미임
2>HTTP/1.0에서는 기본적으로 각 요청마다 연결을 닫음
3>장점: 서버 리소스를 절약할 수 있으나, 매번 새로운 연결을 생성해야 하므로 성능이 떨어질 수 있음

4)Response Body
1>Response Body는 HTTP 응답의 일부로, 클라이언트가 요청한 리소스나 데이터를 포함하는 본문임
2>서버가 요청을 처리한 후 클라이언트에게 반환하는 실제 콘텐츠가 이 부분에 담김

5)Response Body의 주요 특징 : 데이터 포맷
 ->Response Body에는 다양한 형식의 데이터가 포함될 수 있음.
  서버는 클라이언트의 요청에 따라 적절한 포맷으로 데이터를 제공함
->HTML: 웹 페이지 렌더링을 위한 HTML 문서
   JSON: API 응답에서 자주 사용하는 데이터 형식
   XML: 구조화된 데이터 전송에 사용
   Plain Text: 단순 텍스트 데이터
   이미지, 동영상: 바이너리 파일 형식



5. JSON(★★★★★)
JSON(JavaScript Object Notation)은 데이터를 저장하고 전송하는 데 사용되는 경량의 데이터 교환 형식이다.
사람과 기계 모두 읽고 쓰기 쉽도록 설계되었으며, 주로 웹에서 클라이언트와 서버 간의 데이터 교환 형식으로 많이 사용된다.

JSON 주요 특징

1. 텍스트 기반
JSON은 텍스트로 구성되어 있으며, 사람이 읽기 쉬운 구조를 갖는다.
주로 데이터를 네트워크를 통해 전송하거나 파일로 저장하는 데 적합하다.

2. 언어 독립적
JSON은 특정 프로그래밍 언어에 종속되지 않는다.
대부분의 프로그래밍 언어에서 JSON을 쉽게 파싱하거나 생성할 수 있는 라이브러리를 제공한다.

3. 키-값 쌍
JSON 데이터는 키-값 쌍의 구조로 이루어진다.
각 키는 문자열로 나타내고, 값은 다양한 자료형(문자열, 숫자, 배열, 객체 등)이 될 수 있다.

4. 데이터 구조 표현
JSON은 객체, 배열, 숫자, 문자열, true, false, null과 같은 자료형을 표현할 수 있어, 복잡한 데이터 구조를 직관적으로 표현할 수 있다.

JSON의 기본 구조

객체(Object)
중괄호 {}로 감싸며, 여러 개의 키-값 쌍을 포함할 수 있다.
{
    "name": "John",
    "age": 30,
    "city": "New York"
}

JSON의 장점
1. 경량
데이터의 표현이 간결하여 네트워크를 통해 데이터를 효율적으로 전송할 수 있다.
2. 호환성
대부분의 프로그래밍 언어에서 JSON을 지원하며, 데이터를 쉽게 파싱하고 생성할 수 있다.
3. 가독성
사람이 읽고 쓰기 쉬운 구조로 되어 있어, 디버깅과 유지보수에 유리하다.

직렬화와 역직렬화

- 직렬화
메모리상의 객체를 특정 포맷(JSON,XML,바이너리 등)으로 변환하는것을 말한다.
이렇게 변환된 데이터를 파일로 저장하거나 네트워크를 통해 전송할 수 있다.

직렬화의 목적

1. 데이터 저장
데이터를 파일로 저장하거나 데이터베이스에 기록하기 위해 사용된다.
2. 데이터 전송
네트워크를 통해 다른 애플리케이션이나 시스템으로 데이터를 전송할 때 사용된다.

- 역직렬화
직렬화된 데이터를 다시 원래의 객체나 데이터 구조로 복원하는 과정이다.
전송된 후 이를 다시 사용할 수 있는 객체로 복구할 때 사용된다.

서버란
- 서버란 프로그램이다.
- 이 프로그램은 지정된 포트, 예를 들어 8080포트에 소켓을 열고 클라이언트가 연결할 때까지 무한히 대기하며 기다린다.
- 그러다가 클라이언트가 연결하면 해당 클라이언트 소켓에서 요청을 받아와 수행하고 응답을 작성해 전달한다.



스프링 프레임워크에서 제공하는 주요 서브 프레임워크

1. 스프링 코어 (Spring Core)
설명: 스프링의 핵심 모듈로, **의존성 주입(DI)**과 **제어의 역전(IoC)**을 지원한다. 스프링의 기본적인 애플리케이션 구성을 위한 모듈이다.
주요 기능: 빈(bean) 설정 및 관리, 의존성 주입, IoC 컨테이너 관리.

2. 스프링 AOP (Aspect-Oriented Programming)
설명: 관점 지향 프로그래밍을 지원하는 모듈로, 공통적으로 적용되는 관심사를 분리하여 코드 중복을 줄이고 유지보수성을 높인다.
주요 기능: 로깅, 보안, 트랜잭션 관리, 예외 처리 등 공통 로직의 분리.

3. 스프링 ORM (Spring ORM)
설명: 스프링 프레임워크에서 **객체와 관계형 데이터베이스 간의 매핑(ORM)**을 지원하는 모듈이다.
스프링 ORM은 자바 객체와 데이터베이스 테이블 간의 상호작용을 간소화하고, 데이터베이스 연동에 필요한 복잡한 코드를 줄여준다.
다양한 ORM 프레임워크를 지원하며, 스프링의 트랜잭션 관리와 통합되어 데이터베이스 작업을 효율적으로 처리할 수 있다.
주요 특징:
ORM 프레임워크 통합: 스프링은 Hibernate, JPA(Java Persistence API), MyBatis 등의 ORM 프레임워크를 지원하며, 스프링의 트랜잭션 관리 기능과 쉽게 연동할 수 있다.
추상화된 데이터 액세스: 스프링 ORM을 사용하면 데이터베이스와의 직접적인 상호작용이 아니라 객체 지향적 코드로 데이터를 관리할 수 있다.
선언적 트랜잭션 관리: 스프링의 @Transactional 애노테이션을 사용하여 데이터베이스 작업에서 발생하는 트랜잭션을 쉽게 관리할 수 있다.
데이터베이스 독립성: ORM을 사용하면 특정 데이터베이스에 의존하지 않고 애플리케이션을 설계할 수 있다.
스프링 ORM의 장점:
데이터베이스 연동 코드가 간결해지고 유지보수가 쉬워진다.
트랜잭션 관리와 같은 부가적인 기능이 자동으로 처리된다.
JPA나 Hibernate와 같은 ORM 프레임워크를 쉽게 통합하여 사용할 수 있다.

4. 스프링 Web (Spring Web)
스프링 Web은 스프링 MVC 패턴을 기반으로 웹 애플리케이션을 개발하는 데 사용된다.
HTML 페이지를 렌더링하고, 클라이언트 요청을 처리하여 동적인 웹 페이지를 생성하는 것을 목표로 한다.
주로 서버 측에서 HTML, JSP, Thymeleaf 등의 템플릿을 사용해 사용자에게 페이지를 렌더링하는 전통적인 웹 애플리케이션에 적합하다.
주요 특징:
MVC 아키텍처 지원: Model, View, Controller로 애플리케이션을 구성하여 비즈니스 로직과 프레젠테이션을 분리한다.
동적 콘텐츠 생성: 서버 측에서 HTML, JSP, Thymeleaf 등을 렌더링해 클라이언트에게 동적 페이지를 제공한다.
폼 데이터 처리: 사용자로부터 받은 폼 데이터를 처리하고, 그 결과를 클라이언트에게 전달하는데 사용된다.
스프링 Web의 주요 사용 사례:
HTML 기반 웹 페이지를 렌더링하는 전통적인 웹 애플리케이션 개발.
서버에서 템플릿 엔진(Thymeleaf, JSP 등)을 사용하여 동적 웹 페이지를 생성.

5. 스프링 MVC (Spring Web MVC)
설명: MVC 패턴을 기반으로 웹 애플리케이션을 개발할 수 있도록 지원하는 모듈이다. 프론트엔드와 백엔드 간의 HTTP 요청 및 응답 처리를 담당한다.
주요 기능: RESTful 웹 서비스, 데이터 바인딩, 폼 처리, API 개발.

6. 스프링 시큐리티 (Spring Security)
설명: 애플리케이션의 인증 및 권한 부여를 관리하는 모듈로, 보안 기능을 쉽게 구현할 수 있도록 한다.
주요 기능: 사용자 인증, 권한 부여, 세션 관리, CSRF 보호, 암호화 기능 등.

7. 스프링 부트 (Spring Boot)
설명: 스프링 애플리케이션을 간편하게 설정하고 실행할 수 있도록 도와주는 프레임워크다. 내장 서버(Tomcat, Jetty 등)를 제공하여 빠르게 독립 실행형 애플리케이션을 개발할 수 있다.
주요 기능: 자동 설정, 내장 웹 서버, 간편한 프로젝트 설정 및 빌드.










